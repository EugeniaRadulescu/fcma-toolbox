README for building FCMA dependencies
----

The FCMA toolbox uses OpenMP, MPI and CBLAS calls. It also
reads in data exclusively as NifTI compressed (nii.gz) volumes,
requiring the nifticlib library available from sourceforge
(see README.nifticlib and README.blas for more details on each)

We use Intel MPI and MKL as well as Xeon Phi's installed in
our cluster, so the toolbox runs best on a cluster with the
our cluster's architecture: Sandy Bridge Xeons, Xeon Phi coprocessors,
10GigE interconnect using Intel Compiler, Intel MPI, and Intel MKL.

However, the code itself will compile on pretty much any platform
that has an MPI and BLAS implementation.

Other options for the main dependencies:
- OpenMPI             www.open-mpi.org
- OpenBLAS            www.openblas.net
- Nifticlib 2.0       sourceforge.net/projects/niftilib

    a copy of nifticlib-2.0.0 is provided in deps/
    see README.nifticlib for how to build it (just type "make")

Linux
------
All dependencies should install readily on Linux, consult their
project pages, if an appropriate .rpm/.deb binary package
cannot be found. Gcc has OpenMP support.

Mac OS X
-------
Note that running voxel selection on a standalone computer, rather
than across a large cluster, is not a good idea. However, the toolbox
will compile on a Mac no problem:
- MPI : OpenMPI installs easily on Mac OS X. Download the source,
  cd to the expanded dir, ./configure CC=clang CXX=clang++ --prefix=/opt
  (or /usr/local if preferred) and then make && sudo make install.
- BLAS: The built-in Accelerate framework will be used for BLAS, and is used by
  the source if compiling on an OS X computer.
- OPENMP: The built-in compiler, clang, does not support OpenMP just yet. Currently
  the source will build, ignoring the OpenMP directives. An updated version
  that uses Intel's OpenMP runtime for LLVM will be incorporated soon.

Customize Make.user for your platform if necessary
---
In the src directory, the main Makefile includes Make.user
which need only define the location of BLAS and any relevant
flags. Most common cases should be covered by one of the
Make.user.xxx files in src/
