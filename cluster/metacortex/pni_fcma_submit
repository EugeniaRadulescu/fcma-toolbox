#!/bin/bash

default_pe="make"
# the fcma file with runtime settings read in by pni_fcma
# and this script too (for meta-settings)
fcmafile="/share/apps/fcma-toolbox/cluster/template.fcma"
(( $# < 1 )) && echo "usage: $(basename $0) params.fcma  | example fcmafile at $fcmafile" && exit 1
[[ ! -f $1 ]] && echo "$1 not found" && exit 1
fcmafile=$1
dryrun=0
#----------------
# hget()
# get fcma file setting
#----------------
function hget() {
  grep -w $1 $fcmafile | grep -v '#' | cut -d: -f2
}

dryrun=$(hget dryrun)
[[ -n $dryrun ]] && (( dryrun == 0 )) && dryrun=""
# which binary to run
binary=$(hget binary)
[[ -z $binary ]] && binary=pni_fcma

# use sge job?
use_sge=$(hget use_sge)
[[ -n $use_sge ]] && (( use_sge == 0 )) && use_sge=0 || use_sge=1
(( use_sge )) && qconf -sp $default_pe >/dev/null 2>&1 && use_sge=1 || use_sge=0
(( use_sge )) ||  echo -n "NOT "
echo "using sge job submission"
(( use_sge )) || hostfile=$(hget hostfile)

# use xeon phi?
use_phi=$(hget use_phi)
[[ $use_phi == 1 ]] && use_phi=1 || use_phi=0
if (( use_phi )); then
  echo "\"use_phi\" was set to 1; attempting to use Xeon Phi"
  binary_mic=$(hget binary_mic)
  [[ -z $binary_mic ]] && binary_mic=pni_fcma_mic
  # max 240 OpenMP threads on mic
  # (60 cores, 4 virtual per physical)
  threads_max_mic=240
  threads_mic=$(hget omp_num_threads_mic)
  ( [[ x$threads_mic == x ]] || (( threads_mic > threads_max_mic )) ) && threads_mic=$threads_max_mic

  micenable="I_MPI_MIC=enable"
  threadline_mic="-env OMP_NUM_THREADS ${threads_mic}"
  [[ -f $hostfile ]] && michosts=$(cat $hostfile | grep mic | xargs echo | sed 's/ /,/')
  [[ -n $michosts ]] && nmhosts=$(cat $hostfile | grep mic | wc -l | awk '{print $1}')
  (( nmhosts > 0 )) && hostline_mic="-hosts $michosts" || hostline_mic=""
else
  nmhosts=0
  micenable=""
  threadline_mic=""
fi

[[ -f $hostfile ]] && cpuhosts=$(cat $hostfile | grep -v mic | xargs echo | sed 's/ /,/')
[[ -n $cpuhosts ]] && nchosts=$(cat $hostfile | grep -v mic | wc -l | awk '{print $1}')
(( nchosts > 0 )) && hostline="-hosts $cpuhosts" || hostline=""

# number of OpenMP threads
# per node. max is 32 on metacortex
# (16 cores, 2 virtual per physical)
threads_max=32
threads=$(hget omp_num_threads)
( [[ x$threads == x ]] || (( threads > threads_max )) ) && threads=$threads_max
threadline="-env OMP_NUM_THREADS ${threads}"

# TODO: set rows_per_round dynamically in
# the pni_fcma C++ code. Depends on the
# data, memory available etc

# --------------------------
# main
# --------------------------

#-genv I_MPI_DEBUG 5 \
#-genv I_MPI_FABRICS_LIST tcp \
#-genv I_MPI_FALLBACK 0"

command="\
$micenable \
mpiexec.hydra $threadline $hostline $binary $fcmafile"

if (( use_phi )); then

  command="$command \
: \
$threadline_mic \
-env LD_LIBRARY_PATH /opt/intel/mkl/lib/mic:/opt/intel/composer_xe/compiler/lib/mic \
${binary_mic} $hostline_mic $fcmafile"

fi

[[ x$dryrun != x ]] && printf "\n\t**** DRY RUN, would run: ****\n\n"

if (( use_sge )); then
  containingdir=$(basename $(dirname $fcmafile))
  [[ -z $containingdir ]] || [[ $containingdir == . ]] && containingdir=$(basename $PWD)
  fr=$(basename $fcmafile)
  fcmaroot=${fr%\.fcma}
  jobname="${containingdir}_${fcmaroot}"
  echo "job name set to $jobname"

  tempfile=$(mktemp)

  num_processors=$(hget num_processors)
  [[ -z $num_processors ]] && num_processors=8

cat <<EOF > $tempfile
#!/bin/bash
#\$-V -j y -cwd -N $jobname
#\$-q fcma.q
#\$-pe mpi $num_processors
$command
EOF
  
  [[ x$dryrun != x ]] && echo "qsubbing this file:" && cat $tempfile && rm -f $tempfile && exit 

  qsub $tempfile
else

  echo $command
  [[ x$dryrun != x ]] && exit

  eval $command

fi

